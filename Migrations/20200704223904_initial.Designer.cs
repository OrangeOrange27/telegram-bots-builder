// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using WebTelegramBotsBuilder.Models;

namespace WebTelegramBotsBuilder.Migrations
{
    [DbContext(typeof(MainContext))]
    [Migration("20200704223904_initial")]
    partial class initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("BotCreator.Core.BotQueries.BotQuery", b =>
                {
                    b.Property<int>("BotQueryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BotResponseId")
                        .HasColumnType("int");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TelegramBotId")
                        .HasColumnType("int");

                    b.Property<int>("queryType")
                        .HasColumnType("int");

                    b.HasKey("BotQueryId");

                    b.HasIndex("BotResponseId");

                    b.HasIndex("TelegramBotId");

                    b.ToTable("BotQueries");

                    b.HasDiscriminator<string>("Discriminator").HasValue("BotQuery");
                });

            modelBuilder.Entity("BotCreator.Core.BotResponses.BotResponse", b =>
                {
                    b.Property<int>("BotResponseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("responseType")
                        .HasColumnType("int");

                    b.HasKey("BotResponseId");

                    b.ToTable("BotResponses");

                    b.HasDiscriminator<string>("Discriminator").HasValue("BotResponse");
                });

            modelBuilder.Entity("BotCreator.Core.TelegramBot", b =>
                {
                    b.Property<int>("TelegramBotId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("BotName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BotToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsStarted")
                        .HasColumnType("bit");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("TelegramBotId");

                    b.HasIndex("UserId");

                    b.ToTable("Bots");
                });

            modelBuilder.Entity("WebTelegramBotsBuilder.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("BotCreator.Core.BotQueries.BotMessageQuery", b =>
                {
                    b.HasBaseType("BotCreator.Core.BotQueries.BotQuery");

                    b.Property<string>("Message")
                        .HasColumnType("nvarchar(max)");

                    b.HasDiscriminator().HasValue("BotMessageQuery");
                });

            modelBuilder.Entity("BotCreator.Core.BotResponses.BotMessageResponse", b =>
                {
                    b.HasBaseType("BotCreator.Core.BotResponses.BotResponse");

                    b.Property<string>("Message")
                        .HasColumnType("nvarchar(max)");

                    b.HasDiscriminator().HasValue("BotMessageResponse");
                });

            modelBuilder.Entity("BotCreator.Core.BotQueries.BotQuery", b =>
                {
                    b.HasOne("BotCreator.Core.BotResponses.BotResponse", "Response")
                        .WithMany()
                        .HasForeignKey("BotResponseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BotCreator.Core.TelegramBot", null)
                        .WithMany("BotQueries")
                        .HasForeignKey("TelegramBotId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BotCreator.Core.TelegramBot", b =>
                {
                    b.HasOne("WebTelegramBotsBuilder.Models.User", null)
                        .WithMany("Bots")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
